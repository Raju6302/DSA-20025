------------ Hash Table Using Separate Chaining ---------
  A Hash Table is a data structure that stores key-value pairs, allowing efficient insertion, deletion, and lookup operations. It uses a hash function to compute an index for storing data.

  In Separate Chaining, each index in the array (hash table) stores a linked list to handle collisions. When multiple keys hash to the same index, they are stored in a linked list at that index.


Properties of Hash Tables

  1.Uses a hash function to compute the index for a given key.

  2. Supports fast lookups with an average time complexity of O(1).

  3. Uses collision handling techniques, such as separate chaining or linear probing.

  4. Commonly used in databases, caches, and symbol tables in compilers.

  5. In separate chaining, multiple values at the same index are stored in a linked list.


----- Hash Function Pseudocode ------------

  1. Distribute keys uniformly across the table.

  2. Minimize collisions.

  3. Be efficient (O(1) time complexity).

hashFunction(key, tableSize):
    sum = 0
    for each character in key:
        sum = sum + ASCII(character)   // Convert character to ASCII and add
    index = sum % tableSize            // Modulo operation to fit in table size
    return index

This method works well for string keys.

  Example:
  ASCII values of 'r', 'a', 'j'

    ASCII(r) = 114

    ASCII(a) = 97

    ASCII(j) = 106

    Applying your hash function:
    hash=(114×23+97×23+106×23)mod7
    
    114×23=2622
    97×23=2231
    106×23=2438

    Sum = 2622 + 2231 + 2438 = 7291

    Modulo with table size 7:
    7291 % 7 = 4
    so hash = 4;

Operations in Hash Table Using Separate Chaining

  1. Insertion

  Compute the index using the hash function.

  If the index is empty, insert the new node.

  If a collision occurs, traverse the linked list at that index and insert the new node at the end.


-------- Pseudocode for Insertion ---------

Insert(key, value):
    index = hashFunction(key)
    newNode = Node(key, value)

    if hashTable[index] is NULL:
        hashTable[index] = newNode
    else:
        temp = hashTable[index]
        while temp.next is NOT NULL:
            temp = temp.next
        temp.next = newNode

Time Complexity:

  Best/Average Case: O(1) (if the table is not too full)

  Worst Case: O(n) (if all keys hash to the same index)


2. Get

    Compute the index using the hash function.

    Traverse the linked list at that index to find the key.

    If found, return the associated value.


------------Pseudocode for get---------

get(key):
    index = hashFunction(key)
    temp = hashTable[index]
    
    while temp is NOT NULL:
        if temp.key == key:
            return temp.value
        temp = temp.next

    return "Key Not Found"

Time Complexity:

  Best/Average Case: O(1)

  Worst Case: O(n) (if all elements are in the same linked list)


Advantages of Separate Chaining

✔ Handles collisions efficiently using linked lists.
✔ Allows dynamic size expansion without major restructuring.
✔ Works well if the load factor remains low.

Disadvantages of Separate Chaining

✖ Requires extra memory for pointers in linked lists.
✖ Lookup and deletion can be slow if too many collisions occur.


Applications of Hash Tables

  Databases: Indexing and caching.

  Compilers: Symbol table for variable lookups.

  Networking: Routing tables and DNS caching.

  Cryptography: Storing hash values.